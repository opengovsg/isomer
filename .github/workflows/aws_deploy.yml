name: AWS Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        type: string
      ecs-container-port:
        description: "Port that ecs listens on for traffic"
        required: true
        type: number
      shortEnv:
        description: "Deployment environment, the short version (one of [dev, prod, stg, test, uat, vapt])"
        required: true
        type: string
      aws-account-id:
        description: "AWS account ID to use"
        required: true
        type: string
      aws-region:
        description: "AWS region to use"
        required: true
        default: "ap-southeast-1"
        type: string
      cicd-role:
        description: "AWS IAM role to assume by GitHub action runner"
        required: true
        type: string
      ecr-repository:
        description: "ECR repository to push image to"
        required: true
        type: string
      ecs-cluster-name:
        description: "ECS cluster to deploy to"
        required: true
        type: string
      ecs-task-definition-path:
        description: "ECS task definition path"
        default: "ecs-task-definition.json"
        type: string
      ecs-service-name:
        description: "ECS service to deploy to"
        required: true
        type: string
      ecs-container-name:
        description: "Name of container in ECS task definition"
        required: true
        type: string
      codedeploy-application:
        description: "CodeDeploy application to use"
        required: true
        type: string
      codedeploy-appspec-path:
        description: "CodeDeploy appspec.json/yml file path"
        default: "appspec.json"
        type: string
      codedeploy-deployment-group:
        description: "CodeDeploy deployment group to use"
        required: true
        type: string
      ecs-task-role:
        description: "Task role that ecs uses to run our app"
        required: true
        type: string
      ecs-task-exec-role:
        description: "Task role that ecs uses to deploy our app"
        required: true
        type: string
      app-url:
        description: "URL of the app"
        required: false
        type: string
      app-name:
        description: "Name of the app"
        required: false
        default: "Isomer Studio"
        type: string
      app-version:
        description: "Version of the app"
        required: false
        default: "0.0.0"
        type: string
      app-s3-region:
        description: "S3 region for the assets bucket"
        required: false
        default: "ap-southeast-1"
        type: string
      app-s3-assets-domain-name:
        description: "Public domain name for the assets bucket"
        required: false
        default: "user-content.example.com"
        type: string
      app-s3-assets-bucket-name:
        description: "Name of the assets S3 bucket"
        required: false
        default: "example-assets-bucket"
        type: string
      app-growthbook-client-key:
        description: "Growthbook client key"
        required: false
        type: string
      app-intercom-app-id:
        description: "Intercom app ID"
        required: false
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  build:
    name: Build and push image to ECR
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: network=host

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ inputs.cicd-role }}
          role-session-name: github-action-application-deploy
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Build and load image to Docker
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ github.ref_name }}_${{ github.sha }}
        with:
          context: .
          file: "./apps/studio/Dockerfile"
          load: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          build-args: |
            NEXT_PUBLIC_APP_ENV=${{ inputs.environment }}
            NEXT_PUBLIC_APP_URL=${{ inputs.app-url }}
            NEXT_PUBLIC_APP_NAME=${{ inputs.app-name }}
            NEXT_PUBLIC_APP_VERSION=${{ inputs.app-version }}
            NEXT_PUBLIC_S3_REGION=${{ inputs.app-s3-region }}
            NEXT_PUBLIC_S3_ASSETS_DOMAIN_NAME=${{ inputs.app-s3-assets-domain-name }}
            NEXT_PUBLIC_S3_ASSETS_BUCKET_NAME=${{ inputs.app-s3-assets-bucket-name }}
            NEXT_PUBLIC_GROWTHBOOK_CLIENT_KEY=${{ inputs.app-growthbook-client-key }}
            NEXT_PUBLIC_INTERCOM_APP_ID=${{ inputs.app-intercom-app-id }}

      - name: Scan built image with Inspector
        uses: aws-actions/vulnerability-scan-github-action-for-amazon-inspector@v1
        id: inspector
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ github.ref_name }}_${{ github.sha }}
        with:
          artifact_type: "container"
          artifact_path: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          critical_threshold: 1
          high_threshold: 1
          medium_threshold: 1
          low_threshold: 1
          other_threshold: 1

      - name: Fail job if vulnerability threshold is exceeded
        run: exit ${{ steps.inspector.outputs.vulnerability_threshold_exceeded }}

      - name: Push image to ECR after scan passes
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          IMAGE_TAG: ${{ github.ref_name }}_${{ github.sha }}
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  deploy:
    name: Deploy image to ECS
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ inputs.environment }}

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.cicd-role }}
          role-session-name: github-action-application-deploy
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Replace variables in task definition file
        id: replace-variables
        run: |
          sed -i 's/<AWS_ACCOUNT_ID>/${{ inputs.aws-account-id }}/g' ${{ inputs.ecs-task-definition-path }}
          sed -i 's/<ENV>/${{ inputs.environment }}/g' ${{ inputs.ecs-task-definition-path }}
          sed -i 's/<SHORT_ENV>/${{ inputs.shortEnv }}/g' ${{ inputs.ecs-task-definition-path }}
          sed -i 's/<CPU>/${{ inputs.environment == 'production' && 1024 || 512 }}/g' ${{ inputs.ecs-task-definition-path }}
          sed -i 's/<MEMORY>/${{ inputs.environment == 'production' && 2048 || 1024 }}/g' ${{ inputs.ecs-task-definition-path }}
          sed -i 's/<DD_COMMIT_SHA>/${{ github.sha }}/g' ${{ inputs.ecs-task-definition-path }}
          sed -i 's/<ECS_TASK_ROLE>/${{ inputs.ecs-task-role }}/g' ${{ inputs.ecs-task-definition-path }}
          sed -i 's/<ECS_TASK_EXEC_ROLE>/${{ inputs.ecs-task-exec-role }}/g' ${{ inputs.ecs-task-definition-path }}

      - name: Replace variables in appspec
        run: |
          sed -i 's/<AWS_ACCOUNT_ID>/${{ inputs.aws-account-id }}/g' .aws/deploy/appspec.json
          sed -i 's/<ENV>/${{ inputs.environment}}/g' .aws/deploy/appspec.json
          sed -i 's/<CONTAINER_NAME>/${{ inputs.ecs-container-name }}/g' .aws/deploy/appspec.json
          sed -i 's/<CONTAINER_PORT>/${{ inputs.ecs-container-port }}/g' .aws/deploy/appspec.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr-repository }}
          ENV: ${{ inputs.environment }}
          IMAGE_TAG: ${{ github.ref_name }}_${{ github.sha }}
        with:
          task-definition: ${{ inputs.ecs-task-definition-path }}
          container-name: ${{ inputs.ecs-container-name }}
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          cluster: ${{ inputs.ecs-cluster-name }}
          service: ${{ inputs.ecs-service-name }}
          wait-for-service-stability: true
          codedeploy-appspec: ${{ inputs.codedeploy-appspec-path }}
          codedeploy-application: ${{ inputs.codedeploy-application }}
          codedeploy-deployment-group: ${{ inputs.codedeploy-deployment-group }}

      # - name: Upload sourcemaps to Datadog
      #   if: ${{ env.DD_API_KEY != '' }}
      #   env:
      #     IMAGE_TAG: ${{ env.LOCAL_IMAGE_TAG }}
      #   shell: bash
      #   run: |
      #     npm install -g @datadog/datadog-ci
      #     rm -rf assets
      #     docker cp $(docker create ${IMAGE_TAG}):/opt/nemsw/services/frontend/build/assets assets
      #     datadog-ci sourcemaps upload assets \
      #       --service=bright --release-version=${{ github.sha }} --minified-path-prefix=/assets/
