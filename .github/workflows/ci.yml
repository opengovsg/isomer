name: CI

on:
  push:
    branches:
      - main
      - staging
      - production
  pull_request:
    types: [opened, synchronize]

env:
  LOG_LEVEL: silent

jobs:
  optimize_ci:
    runs-on: ubuntu-latest # or whichever runner you use for your CI
    outputs:
      skip: ${{ steps.check_skip.outputs.skip }}
    steps:
      - name: Optimize CI
        id: check_skip
        uses: withgraphite/graphite-ci-action@main
        with:
          graphite_token: ${{ secrets.GRAPHITE_CI_OPTIMIZER_TOKEN }}
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Lint
        run: npm run lint && npm run lint:ws

  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Format
        run: npm run format

  typecheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Typecheck
        run: npm run typecheck

  unit-integration-tests:
    name: Unit & integration tests
    needs: optimize_ci
    runs-on: ubuntu-latest
    if: needs.optimize_ci.outputs.skip == 'false'
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Load .env file
        uses: xom9ikk/dotenv@v2
        with:
          mode: test
      - name: Test Studio
        run: turbo test:unit --filter=isomer-studio

  end-to-end-tests:
    name: End-to-end tests
    needs: optimize_ci
    runs-on: ubuntu-latest
    if: needs.optimize_ci.outputs.skip == 'false'
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Install Playwright (Chromium)
        run: npx playwright install chromium
      - name: Load .env file
        uses: xom9ikk/dotenv@v2
        with:
          mode: test
      - name: Next.js cache
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      - name: Build Studio app
        run: turbo build --filter=isomer-studio

      - name: Start test containers
        run: npm run setup:test

      - name: Run Playwright tests
        run: turbo test-ci:e2e --filter=isomer-studio

      - name: Stop test containers
        run: npm run teardown

      - name: Upload test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test results
          path: playwright/test-results
          retention-days: 7
