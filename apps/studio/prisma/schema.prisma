// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

/// Always after the prisma-client-js generator
/// Generates types for the JSON columns
/// The relevant types are declared in a separate prisma/types.ts file.
generator json {
  provider = "prisma-json-types-generator"
}

generator kysely {
  provider     = "prisma-kysely"
  readOnlyIds  = true
  output       = "./generated"
  fileName     = "generatedTypes.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "generatedEnums.ts"
}

model VerificationToken {
  identifier String   @id
  token      String
  attempts   Int      @default(0)
  expires    DateTime
}

model Version {
  id          BigInt     @id @default(autoincrement())
  versionNum  Int
  resourceId  BigInt
  resources   Resource[]
  blobId      BigInt     @unique
  blob        Blob       @relation(fields: [blobId], references: [id])
  publishedAt DateTime   @default(now())
  publishedBy String
  publisher   User       @relation(fields: [publishedBy], references: [id])

  updatedAt DateTime @default(now()) @updatedAt
}

model Resource {
  id        BigInt    @id @default(autoincrement())
  title     String
  permalink String
  siteId    Int
  site      Site      @relation(fields: [siteId], references: [id])
  parentId  BigInt?
  parent    Resource? @relation("ParentRelation", fields: [parentId], references: [id], onDelete: Cascade)

  children Resource[] @relation("ParentRelation")

  publishedVersionId BigInt?  @unique
  publishedVersion   Version? @relation(fields: [publishedVersionId], references: [id])

  draftBlobId BigInt? @unique
  draftBlob   Blob?   @relation(fields: [draftBlobId], references: [id])

  state ResourceState? @default(Draft)
  type  ResourceType

  // This is only set if the resource is scheduled to be published at a later date
  // If set, this indicates the time at which the resource should be published
  scheduledAt        DateTime?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  ResourcePermission ResourcePermission[]

  // This unique index is subsequently replaced with a custom index that
  // treats nulls as not distinct.
  // This is required so prisma does not attempt to drop the custom index.
  @@unique([siteId, parentId, permalink])
  @@index([siteId, id, parentId]) // note: ordering is important here!
  @@index([type])
  // NOTE: This is used to create a inverted index using text trigrams for the title
  // so that we can perform searches on the title quickly
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin, name: "resource_title_trgm_idx")
}

model Blob {
  id      BigInt @id @default(autoincrement())
  /// @kyselyType(PrismaJson.BlobJsonContent)
  /// [BlobJsonContent]
  content Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  draftResource Resource?
  version       Version?
}

enum ResourceState {
  Draft
  Published
}

enum ResourceType {
  RootPage
  Page
  Folder
  Collection
  CollectionMeta // Can only ever be inside collection
  CollectionLink // Can only ever be inside collection
  CollectionPage // Can only live inside `Collection` resources
  IndexPage // This denotes the index page of a folder or a collection
  FolderMeta // This denotes some of the metadata of a folder (e.g. page ordering)
}

model User {
  id    String @id @default(cuid())
  name  String
  email String
  phone String

  singpassUuid String? @db.Uuid // UUID of the user's Singpass account

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  lastLoginAt DateTime?

  ResourcePermission ResourcePermission[]
  versions           Version[]
  AuditLog           AuditLog[]
  CodeBuildJobs      CodeBuildJobs[]

  // This unique index is subsequently replaced with a custom index that
  // treats nulls as not distinct.
  // This is required so prisma does not attempt to drop the custom index.
  @@unique([email, deletedAt])
  @@index([lastLoginAt])
}

model Site {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  resources   Resource[]
  // NOTE: This is `theme/isGovernment/sitemap`
  // This is currently put as `Json` for ease of extensibility
  // when we lock in what we actually want for site-wide config,
  // we should put this in our db table.
  /// @kyselyType(PrismaJson.SiteJsonConfig)
  /// [SiteJsonConfig]
  config      Json
  /// @kyselyType(PrismaJson.SiteThemeJson)
  /// [SiteThemeJson]
  theme       Json?
  navbar      Navbar?
  footer      Footer?
  codeBuildId String?

  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  ResourcePermission ResourcePermission[]
  AuditLog           AuditLog[]
  CodeBuildJobs      CodeBuildJobs[]
}

model Navbar {
  id     Int  @id @default(autoincrement())
  siteId Int  @unique
  site   Site @relation(fields: [siteId], references: [id])

  /// @kyselyType(PrismaJson.NavbarJsonContent)
  /// [NavbarJsonContent]
  content Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Footer {
  id     Int  @id @default(autoincrement())
  siteId Int  @unique
  site   Site @relation(fields: [siteId], references: [id])

  /// @kyselyType(PrismaJson.FooterJsonContent)
  /// [FooterJsonContent]
  content Json

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ResourcePermission {
  id         BigInt    @id @default(autoincrement())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  siteId     Int
  site       Site      @relation(fields: [siteId], references: [id])
  resourceId BigInt?
  resource   Resource? @relation(fields: [resourceId], references: [id])
  role       RoleType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  deletedAt  DateTime?

  // This unique index is subsequently replaced with a custom index that
  // treats nulls as not distinct.
  // This is required so prisma does not attempt to drop the custom index.
  @@unique([userId, siteId, resourceId, deletedAt])
}

enum RoleType {
  Admin
  Editor
  Publisher
}

model RateLimiterFlexible {
  key    String    @id
  points Int
  expire DateTime?
}

model Whitelist {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@index([email])
}

enum AuditLogEvent {
  ResourceCreate
  ResourceUpdate
  ResourceDelete
  SchedulePublish
  CancelSchedulePublish
  UserCreate
  UserUpdate
  UserDelete
  Publish
  Login
  Logout
  PermissionCreate
  PermissionUpdate
  PermissionDelete
  SiteConfigUpdate
  FooterUpdate
  NavbarUpdate
}

model AuditLog {
  id        BigInt        @id @default(autoincrement())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  site      Site?         @relation(fields: [siteId], references: [id], onDelete: Restrict)
  siteId    Int?
  eventType AuditLogEvent
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  metadata  Json
  /// @kyselyType(PrismaJson.AuditLogDeltaJsonContent)
  /// [AuditLogDeltaJsonContent]
  delta     Json
  ipAddress String?       @db.Inet
}

// Stores CodeBuild job information for auditing and tracking purposes
// Each time a site is published, a new entry is created in this table
// When the webhook from CodeBuild is received, the corresponding entry is updated and the email etc is sent
enum BuildStatusType {
  IN_PROGRESS
  SUCCEEDED
  FAILED
  STOPPED
}

model CodeBuildJobs {
  id          BigInt          @id @default(autoincrement())
  siteId      Int
  site        Site            @relation(fields: [siteId], references: [id])
  userId      String
  user        User            @relation(fields: [userId], references: [id])
  buildId     String
  status      BuildStatusType @default(IN_PROGRESS)
  startedAt   DateTime        @default(now())
  completedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt

  @@index([siteId])
  @@index([userId])
  @@index([buildId])
}
