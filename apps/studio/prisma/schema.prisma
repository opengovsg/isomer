// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// Always after the prisma-client-js generator
/// Generates types for the JSON columns
/// The relevant types are declared in a separate prisma/types.ts file.
generator json {
  provider = "prisma-json-types-generator"
}

generator kysely {
  provider     = "prisma-kysely"
  readOnlyIds  = true
  output       = "./generated"
  fileName     = "generatedTypes.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "generatedEnums.ts"
}

model VerificationToken {
  identifier String   @id
  token      String
  attempts   Int      @default(0)
  expires    DateTime
}

model Version {
  id          BigInt     @id @default(autoincrement())
  versionNum  Int
  resourceId  BigInt
  resources   Resource[]
  blobId      BigInt     @unique
  blob        Blob       @relation(fields: [blobId], references: [id])
  publishedAt DateTime   @default(now())
  publishedBy String
  publisher   User       @relation(fields: [publishedBy], references: [id])
}

model Resource {
  id        BigInt    @id @default(autoincrement())
  title     String
  permalink String
  siteId    Int
  site      Site      @relation(fields: [siteId], references: [id])
  parentId  BigInt?
  parent    Resource? @relation("ParentRelation", fields: [parentId], references: [id])

  children Resource[] @relation("ParentRelation")

  permission Permission[]

  publishedVersionId BigInt?  @unique
  publishedVersion   Version? @relation(fields: [publishedVersionId], references: [id])

  draftBlobId BigInt? @unique
  draftBlob   Blob?   @relation(fields: [draftBlobId], references: [id])

  state ResourceState? @default(Draft)
  type  ResourceType
}

model Blob {
  id            BigInt    @id @default(autoincrement())
  /// @kyselyType(PrismaJson.BlobJsonContent)
  /// [BlobJsonContent]
  content       Json
  draftResource Resource?
  version       Version?
}

enum ResourceState {
  Draft
  Published
}

enum ResourceType {
  RootPage
  Page
  Folder
  Collection
  CollectionPage // Can only live inside `Collection` resources
}

model User {
  id            String  @id @default(cuid())
  name          String
  email         String  @unique
  phone         String
  preferredName String?

  permissions Permission[]
  siteMembers SiteMember[]
  versions    Version[]
}

model Permission {
  id         Int      @id @default(autoincrement())
  resourceId BigInt
  resource   Resource @relation(fields: [resourceId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  role       RoleType

  // Delete the row if either resource or user is deleted, default behavior cascade
}

model Site {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  resources   Resource[]
  siteMembers SiteMember[]
  // NOTE: This is `theme/isGovernment/sitemap`
  // This is currently put as `Json` for ease of extensibility
  // when we lock in what we actually want for site-wide config, 
  // we should put this in our db table.
  /// @kyselyType(PrismaJson.SiteJsonConfig)
  /// [SiteJsonConfig]
  config      Json
  /// @kyselyType(PrismaJson.SiteThemeJson)
  /// [SiteThemeJson]
  theme       Json?
  navbar      Navbar?
  footer      Footer?
  codeBuildId String?
}

model Navbar {
  id     Int  @id @default(autoincrement())
  siteId Int  @unique
  site   Site @relation(fields: [siteId], references: [id])

  /// @kyselyType(PrismaJson.NavbarJsonContent)
  /// [NavbarJsonContent]
  content Json
}

model Footer {
  id     Int  @id @default(autoincrement())
  siteId Int  @unique
  site   Site @relation(fields: [siteId], references: [id])

  /// @kyselyType(PrismaJson.FooterJsonContent)
  /// [FooterJsonContent]
  content Json
}

model SiteMember {
  userId String
  user   User   @relation(fields: [userId], references: [id])
  siteId Int
  site   Site   @relation(fields: [siteId], references: [id])

  @@id([siteId, userId])
}

enum RoleType {
  Admin
  Editor
  Publisher
}
